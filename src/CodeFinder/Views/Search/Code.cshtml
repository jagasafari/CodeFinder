@using System.Threading.Tasks
@using CodeFinder.ViewModels
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model CodeFinder.ViewModels.MachingFilesViewModel
@if (Model.NotFound)
{
    <div class="text-warning">No match found!</div>
}
else
{
    <div>
        <div class="row modal-header">
            <strong class="col-md-5">
                Total number of files: <span data-bind="text: codeFiles().length"></span> out of @Model.MachingFiles.Length
            </strong>
            <div class="col-md-5">
                <ul class="list-inline">
                    @foreach(var keyword in Model.Keywords)
                    {
                        <li>@keyword</li>
                    }
                </ul>
            </div>
            <button id="moreCode" data-bind="click: GetNextFile" class="btn btn-default pull-right col-md-2">Get More Code</button>
        </div>

        <div data-bind="foreach: codeFiles" class="modal-body">
            <div class="text-info">
                <strong class="fileFullPath" data-bind="text: filePath"></strong>
                <br />
            </div>
            <div data-bind="foreach: fileLines">
                <pre class="codeStyle" data-bind="text: $data, css:{styledCodeLine:$root.containsKeyword($data)}">
            </pre>
                <br />
            </div>
            <hr />
        </div>
    </div>
}
@section scripts
{
    <script type="text/javascript">

        $(function() {
            function fileCode(firstFileLines, path) {
                var self = this;
                self.fileLines = firstFileLines;
                self.filePath = path;
            }

            function viewModel() {
                var self = this;
                self.names = @Json.Serialize(Model.MachingFiles);
                self.nextFile = 0;
                self.codeFiles = ko.observableArray([
                    new fileCode(@Json.Serialize(Model.FirstFileContent),
                        self.names[self.nextFile])
                ]);
                self.matchingKeywords = @Json.Serialize(Model.Keywords);
                self.GetNextFile = function() {
                    if (@Json.Serialize(Model.NextFile) < self.names.length) {
                        var nextFilePath = self.names[++self.nextFile];
                        var requestUrl = "http://localhost:5000/Search/FileCode?path=".concat(nextFilePath);
                        $.getJSON(requestUrl, function(fileLines) {
                            self.codeFiles.push(new fileCode(fileLines, nextFilePath));
                        });
                    }
                }
                self.containsKeyword = function(line) {
                    for (var i = 0; i < self.matchingKeywords.length; i++) 
                        if (line.toLowerCase().includes(self.matchingKeywords[i].toLowerCase()))
                            return true;
                    return false;
                }
            }

            ko.applyBindings(new viewModel());
            $("body").on('keydown', function() { $('#moreCode').click(); });
        });
    </script>
}