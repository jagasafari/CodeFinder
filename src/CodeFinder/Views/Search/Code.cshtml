@using System.Threading.Tasks
@using CodeFinder.ViewModels
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model MachingFilesViewModel
<div id="searchForm" class="navbar navbar-inverse navbar-fixed-top centered">
    @{ await Html.RenderPartialAsync("_SearchForm", Model.CodeToFind); }
</div>
<br />
@if (Model.NotFound)
{
    <div class="text-warning">No match found!</div>
}
else
{
    <div class="container body-content">
        <div>
            <strong>
                Total number of files: <span data-bind="text: codeFiles().length"></span> out of @Model.NumberOfMatchingFiles
            </strong>
        </div>
        <div>
            <button id="moreCode" data-bind="click: GetNextFile" class="btn btn-default pull-right col-md-2">Get More Code</button>

            <div data-bind="foreach: codeFiles" class="modal-body">
                <div class="text-info">
                    <strong class="fileFullPath" data-bind="text: filePath"></strong>
                    <br />
                </div>
                <div data-bind="foreach: fileLines">
                    <pre class="codeStyle" data-bind="text: $data, css:{styledCodeLine:$root.containsKeyword($data)}">
            </pre>
                    <br />
                </div>
                <hr />
            </div>
        </div>
    </div>
    @section scripts
{
        <script src="~/js/site.js" asp-append-version="true"></script>
        @{ await Html.RenderPartialAsync("_ValidationScripts"); }
        <script type="text/javascript">
            $(document).ready(disableSubmit);
        </script>

        <script type="text/javascript">
            $(function() {
                function fileCode(firstFileLines, path) {
                    var self = this;
                    self.fileLines = firstFileLines;
                    self.filePath = path;
                }

                function viewModel() {
                    var self = this;
                    self.names = @Json.Serialize(Model.MachingFiles);
                    self.nextFile = 0;
                    self.codeFiles = ko.observableArray([
                        new fileCode(@Json.Serialize(Model.FirstFileContent),
                            self.names[self.nextFile])
                    ]);
                    self.GetNextFile = function() {
                        if (@Json.Serialize(Model.NextFile) < self.names.length) {
                            var nextFilePath = self.names[++self.nextFile];
                            var requestUrl = "http://localhost:5001/Search/FileCode?path=".concat(nextFilePath);
                            $.getJSON(requestUrl, function(fileLines) {
                                self.codeFiles.push(new fileCode(fileLines, nextFilePath));
                            });
                        }
                    }
                    var keywordsString = @Json.Serialize(Model.CodeToFind.Keywords);
                    self.matchingKeywords = keywordsString.split(",");
                    self.containsKeyword = function(line) {
                        for (var i = 0; i < self.matchingKeywords.length; i++)
                            if (line.toLowerCase().includes(self.matchingKeywords[i].toLowerCase()))
                                return true;
                        return false;
                    }
                }

                ko.applyBindings(new viewModel());
                $("body").on('keydown', function() { $('#moreCode').click(); });
            });
        </script>
    }
            }
